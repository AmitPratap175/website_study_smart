{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/contexts/DataContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext(undefined);\nexport const useData = () => {\n  _s();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within DataProvider');\n  }\n  return context;\n};\n\n// Simulated API calls\n_s(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst fetchQuestionsData = async () => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  const subjects = ['quant', 'varc', 'dilr', 'essay', 'decision-making'];\n  const data = {};\n  for (const subject of subjects) {\n    try {\n      const response = await fetch(`/data/final_${subject}.json`);\n      const json = await response.json();\n      data[subject] = json.questions || [];\n    } catch (error) {\n      console.error(`Failed to load ${subject} data:`, error);\n      data[subject] = [];\n    }\n  }\n  return data;\n};\nexport const DataProvider = ({\n  children\n}) => {\n  _s2();\n  const [questions, setQuestions] = useState({});\n  const [userProgress, setUserProgress] = useState(() => {\n    const saved = localStorage.getItem('userProgress');\n    return saved ? JSON.parse(saved) : {\n      answered: {},\n      completed: [],\n      scores: {},\n      totalQuestions: 0,\n      correctAnswers: 0\n    };\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchQuestionsData().then(data => {\n      setQuestions(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Failed to fetch questions:', error);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('userProgress', JSON.stringify(userProgress));\n  }, [userProgress]);\n  const updateAnswer = (questionId, answer) => {\n    setUserProgress(prev => ({\n      ...prev,\n      answered: {\n        ...prev.answered,\n        [questionId]: answer\n      }\n    }));\n  };\n  const markComplete = questionId => {\n    setUserProgress(prev => ({\n      ...prev,\n      completed: [...prev.completed.filter(id => id !== questionId), questionId]\n    }));\n  };\n  const getQuestionsBySubject = subject => {\n    return questions[subject] || [];\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      questions,\n      userProgress,\n      updateAnswer,\n      markComplete,\n      getQuestionsBySubject,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s2(DataProvider, \"YANCYhFy/FQtWxxUSCV7soh9p98=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","DataContext","undefined","useData","_s","context","Error","fetchQuestionsData","Promise","resolve","setTimeout","subjects","data","subject","response","fetch","json","questions","error","console","DataProvider","children","_s2","setQuestions","userProgress","setUserProgress","saved","localStorage","getItem","JSON","parse","answered","completed","scores","totalQuestions","correctAnswers","loading","setLoading","then","catch","setItem","stringify","updateAnswer","questionId","answer","prev","markComplete","filter","id","getQuestionsBySubject","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/frontend/src/contexts/DataContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface Question {\n  qid: string;\n  question_text: string;\n  passage_text?: string;\n  options: Array<{\n    data_option: string;\n    label: string;\n    option_text: string;\n    is_correct: boolean;\n  }>;\n  correct_option_data: string;\n  solution_text?: string;\n  image_url?: string;\n  full_markdown: string;\n}\n\ninterface UserProgress {\n  answered: Record<string, string>;\n  completed: string[];\n  scores: Record<string, number>;\n  totalQuestions: number;\n  correctAnswers: number;\n}\n\ninterface DataContextType {\n  questions: Record<string, Question[]>;\n  userProgress: UserProgress;\n  updateAnswer: (questionId: string, answer: string) => void;\n  markComplete: (questionId: string) => void;\n  getQuestionsBySubject: (subject: string) => Question[];\n  loading: boolean;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within DataProvider');\n  }\n  return context;\n};\n\n// Simulated API calls\nconst fetchQuestionsData = async (): Promise<Record<string, Question[]>> => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  const subjects = ['quant', 'varc', 'dilr', 'essay', 'decision-making'];\n  const data: Record<string, Question[]> = {};\n  \n  for (const subject of subjects) {\n    try {\n      const response = await fetch(`/data/final_${subject}.json`);\n      const json = await response.json();\n      data[subject] = json.questions || [];\n    } catch (error) {\n      console.error(`Failed to load ${subject} data:`, error);\n      data[subject] = [];\n    }\n  }\n  \n  return data;\n};\n\nexport const DataProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [questions, setQuestions] = useState<Record<string, Question[]>>({});\n  const [userProgress, setUserProgress] = useState<UserProgress>(() => {\n    const saved = localStorage.getItem('userProgress');\n    return saved ? JSON.parse(saved) : {\n      answered: {},\n      completed: [],\n      scores: {},\n      totalQuestions: 0,\n      correctAnswers: 0\n    };\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchQuestionsData()\n      .then(data => {\n        setQuestions(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Failed to fetch questions:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('userProgress', JSON.stringify(userProgress));\n  }, [userProgress]);\n\n  const updateAnswer = (questionId: string, answer: string) => {\n    setUserProgress(prev => ({\n      ...prev,\n      answered: { ...prev.answered, [questionId]: answer }\n    }));\n  };\n\n  const markComplete = (questionId: string) => {\n    setUserProgress(prev => ({\n      ...prev,\n      completed: [...prev.completed.filter(id => id !== questionId), questionId]\n    }));\n  };\n\n  const getQuestionsBySubject = (subject: string): Question[] => {\n    return questions[subject] || [];\n  };\n\n  return (\n    <DataContext.Provider value={{\n      questions,\n      userProgress,\n      updateAnswer,\n      markComplete,\n      getQuestionsBySubject,\n      loading\n    }}>\n      {children}\n    </DataContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}